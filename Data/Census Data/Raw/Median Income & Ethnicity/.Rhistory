val_hisp = ifelse(hisp_Med_Inc == "-", NA, as.numeric(hisp_Med_Inc) * as.numeric(Hisp_Count))) %>%
group_by(Subbasin) %>%
summarize(weight_avg_white = sum(val_white, na.rm = TRUE) / sum(White_Count, na.rm = TRUE),
weight_avg_black = sum(val_black, na.rm = TRUE) / sum(Black_Count, na.rm = TRUE),
weight_avg_asian = sum(val_asian, na.rm = TRUE) / sum(Asian_Count, na.rm = TRUE),
weight_avg_haw = sum(val_haw, na.rm = TRUE) / sum(Haw_Count, na.rm = TRUE),
weight_avg_ind = sum(val_ind, na.rm = TRUE) / sum(Ind_Count, na.rm = TRUE),
weight_avg_mix = sum(val_mix, na.rm = TRUE) / sum(Mix_Count, na.rm = TRUE),
weight_avg_oth = sum(val_oth, na.rm = TRUE) / sum(Oth_Count, na.rm = TRUE),
weight_avg_hisp = sum(val_hisp, na.rm = TRUE) / sum(Hisp_Count, na.rm = TRUE)) #Note: NaN where counts are zero
weight_avg_2021 <- countinc_2021 %>%
mutate(val_white = ifelse(White_Med_Inc == "-", NA, as.numeric(White_Med_Inc) * as.numeric(White_Count)),
val_black = ifelse(Black_Med_Inc == "-", NA, as.numeric(Black_Med_Inc) * as.numeric(Black_Count)),
val_asian = ifelse(Asian_Med_Inc == "-", NA, as.numeric(Asian_Med_Inc) * as.numeric(Asian_Count)),
val_haw = ifelse(Haw_Med_Inc == "-", NA, as.numeric(Haw_Med_Inc) * as.numeric(Haw_Count)),
val_ind = ifelse(ind_Med_Inc == "-", NA, as.numeric(ind_Med_Inc) * as.numeric(Ind_Count)),
val_mix = ifelse(mix_Med_Inc == "-", NA, as.numeric(mix_Med_Inc) * as.numeric(Mix_Count)),
val_oth = ifelse(oth_Med_Inc == "-", NA, as.numeric(oth_Med_Inc) * as.numeric(Oth_Count)),
val_hisp = ifelse(hisp_Med_Inc == "-", NA, as.numeric(hisp_Med_Inc) * as.numeric(Hisp_Count))) %>%
group_by(Subbasin) %>%
summarize(weight_avg_white = sum(val_white, na.rm = TRUE) / sum(White_Count, na.rm = TRUE),
weight_avg_black = sum(val_black, na.rm = TRUE) / sum(Black_Count, na.rm = TRUE),
weight_avg_asian = sum(val_asian, na.rm = TRUE) / sum(Asian_Count, na.rm = TRUE),
weight_avg_haw = sum(val_haw, na.rm = TRUE) / sum(Haw_Count, na.rm = TRUE),
weight_avg_ind = sum(val_ind, na.rm = TRUE) / sum(Ind_Count, na.rm = TRUE),
weight_avg_mix = sum(val_mix, na.rm = TRUE) / sum(Mix_Count, na.rm = TRUE),
weight_avg_oth = sum(val_oth, na.rm = TRUE) / sum(Oth_Count, na.rm = TRUE),
weight_avg_hisp = sum(val_hisp, na.rm = TRUE) / sum(Hisp_Count, na.rm = TRUE)) #Note: NaN where counts are zero
View(weight_avg_2010)
# ---- Gini Coefficients ----
#first stacking weighted average variables for each ethnicity
weight_avg_2010 <- weight_avg_2010 %>%
gather(variable, value, -Subbasin)
View(weight_avg_2010)
#sorting subbasin column alphabetically
weight_avg_2010 <- weight_avg_2010 %>%
arrange(Subbasin)
View(weight_avg_2010)
View(gini)
View(gini)
#gini calculating for each subbasin
gini_2010 <- weight_avg_2010 %>%
group_by(Subbasin) %>%
summarize(gini_med_inc = ineq(value, type = "Gini", na.rm = TRUE))
View(gini_2010)
#gini calculating for each subbasin
gini_2010 <- weight_avg_2010 %>%
filter(value != 0) %>%  # Remove rows with zero values
group_by(Subbasin) %>%
summarize(gini_med_inc = ineq(value, type = "Gini", na.rm = TRUE))
weight_avg_2015 <- weight_avg_2015 %>%
gather(variable, value, -Subbasin)
#sorting subbasin column alphabetically
weight_avg_2015 <- weight_avg_2015 %>%
arrange(Subbasin)
#gini calculating for each subbasin
gini_2015 <- weight_avg_2015 %>%
filter(value != 0) %>%  # Remove rows with zero values
group_by(Subbasin) %>%
summarize(gini_med_inc = ineq(value, type = "Gini", na.rm = TRUE))
View(gini_2015)
View(weight_avg_2015)
weight_avg_2021 <- weight_avg_2021 %>%
gather(variable, value, -Subbasin)
#sorting subbasin column alphabetically
weight_avg_2021 <- weight_avg_2021 %>%
arrange(Subbasin)
#gini calculating for each subbasin
gini_2021 <- weight_avg_2021 %>%
filter(value != 0) %>%  # Remove rows with zero values
group_by(Subbasin) %>%
summarize(gini_med_inc = ineq(value, type = "Gini", na.rm = TRUE))
View(weight_avg_2021)
View(gini_2021)
#gini calculating for each subbasin
gini_2010 <- weight_avg_2010 %>%
filter(value != 0) %>%  # Remove rows with zero values
group_by(Subbasin) %>%
summarize(gini_med_inc_2010 = ineq(value, type = "Gini", na.rm = TRUE))
#gini calculating for each subbasin
gini_2015 <- weight_avg_2015 %>%
filter(value != 0) %>%  # Remove rows with zero values
group_by(Subbasin) %>%
summarize(gini_med_inc_2015 = ineq(value, type = "Gini", na.rm = TRUE))
#gini calculating for each subbasin
gini_2021 <- weight_avg_2021 %>%
filter(value != 0) %>%  # Remove rows with zero values
group_by(Subbasin) %>%
summarize(gini_med_inc_2021 = ineq(value, type = "Gini", na.rm = TRUE))
View(gini_2010)
View(gini_2015)
View(gini_2021)
#merging
gini_compare <- merge(gini_2010,gini_2015,by=Subbasin)
#merging
gini_compare <- merge(gini_2010,gini_2015,by="Subbasin")
View(gini_compare)
gini_compare <- merge(gini_compare,gini_2021,by="Subbasin")
View(gini_compare)
#exporting table
write.csv("gini_compare.csv")
###############################################################################
#Visualizing Tables - White & other, and White+asian & other
###############################################################################
library(openxlsx)
#exporting table
write.xlsx(gini_compare, file = "gini_compare.xlsx")
### ^^^^ I need to fix NA's in Count Income data sets and then rerun code becuase it wont calcuate for sections with -
###############################################################################
#Going with this way below versus above because more efficient
###############################################################################
weight_avg_2010 <- countinc_2010 %>%
mutate(val_white = ifelse(White_Med_Inc == "-", NA, as.numeric(White_Med_Inc) * as.numeric(White_Count)), #creating numerators for weight average, multiplying each GEOID med inc by its count by race
val_black = ifelse(Black_Med_Inc == "-", NA, as.numeric(Black_Med_Inc) * as.numeric(Black_Count)),  #Also telling r to change "-" symbols to NA's so I can take them into account in my equation
val_asian = ifelse(Asian_Med_Inc == "-", NA, as.numeric(Asian_Med_Inc) * as.numeric(Asian_Count)),
val_haw = ifelse(Haw_Med_Inc == "-", NA, as.numeric(Haw_Med_Inc) * as.numeric(Haw_Count)),
val_ind = ifelse(ind_Med_Inc == "-", NA, as.numeric(ind_Med_Inc) * as.numeric(Ind_Count)),
val_mix = ifelse(mix_Med_Inc == "-", NA, as.numeric(mix_Med_Inc) * as.numeric(Mix_Count)),
val_oth = ifelse(oth_Med_Inc == "-", NA, as.numeric(oth_Med_Inc) * as.numeric(Oth_Count)),
val_hisp = ifelse(hisp_Med_Inc == "-", NA, as.numeric(hisp_Med_Inc) * as.numeric(Hisp_Count))) %>%
group_by(Subbasin) %>%
summarize(weight_avg_white = sum(val_white, na.rm = TRUE) / sum(White_Count, na.rm = TRUE), #Then taking the numerator and dividing by total pop in each subbasin by race (thus calculating a weighted average)
weight_avg_black = sum(val_black, na.rm = TRUE) / sum(Black_Count, na.rm = TRUE),   #This method takes into weights of each race in each geoid (white count in geoid/total white count in subbasin), multiplied by race's med income in each geoid,
weight_avg_asian = sum(val_asian, na.rm = TRUE) / sum(Asian_Count, na.rm = TRUE),    #then each value for each geoid summed to subbasin level
weight_avg_haw = sum(val_haw, na.rm = TRUE) / sum(Haw_Count, na.rm = TRUE),
weight_avg_ind = sum(val_ind, na.rm = TRUE) / sum(Ind_Count, na.rm = TRUE),
weight_avg_mix = sum(val_mix, na.rm = TRUE) / sum(Mix_Count, na.rm = TRUE),
weight_avg_oth = sum(val_oth, na.rm = TRUE) / sum(Oth_Count, na.rm = TRUE),
weight_avg_hisp = sum(val_hisp, na.rm = TRUE) / sum(Hisp_Count, na.rm = TRUE)) #Note: NaN where counts are zero
weight_avg_2015 <- countinc_2015 %>%
mutate(val_white = ifelse(White_Med_Inc == "-", NA, as.numeric(White_Med_Inc) * as.numeric(White_Count)),
val_black = ifelse(Black_Med_Inc == "-", NA, as.numeric(Black_Med_Inc) * as.numeric(Black_Count)),
val_asian = ifelse(Asian_Med_Inc == "-", NA, as.numeric(Asian_Med_Inc) * as.numeric(Asian_Count)),
val_haw = ifelse(Haw_Med_Inc == "-", NA, as.numeric(Haw_Med_Inc) * as.numeric(Haw_Count)),
val_ind = ifelse(ind_Med_Inc == "-", NA, as.numeric(ind_Med_Inc) * as.numeric(Ind_Count)),
val_mix = ifelse(mix_Med_Inc == "-", NA, as.numeric(mix_Med_Inc) * as.numeric(Mix_Count)),
val_oth = ifelse(oth_Med_Inc == "-", NA, as.numeric(oth_Med_Inc) * as.numeric(Oth_Count)),
val_hisp = ifelse(hisp_Med_Inc == "-", NA, as.numeric(hisp_Med_Inc) * as.numeric(Hisp_Count))) %>%
group_by(Subbasin) %>%
summarize(weight_avg_white = sum(val_white, na.rm = TRUE) / sum(White_Count, na.rm = TRUE),
weight_avg_black = sum(val_black, na.rm = TRUE) / sum(Black_Count, na.rm = TRUE),
weight_avg_asian = sum(val_asian, na.rm = TRUE) / sum(Asian_Count, na.rm = TRUE),
weight_avg_haw = sum(val_haw, na.rm = TRUE) / sum(Haw_Count, na.rm = TRUE),
weight_avg_ind = sum(val_ind, na.rm = TRUE) / sum(Ind_Count, na.rm = TRUE),
weight_avg_mix = sum(val_mix, na.rm = TRUE) / sum(Mix_Count, na.rm = TRUE),
weight_avg_oth = sum(val_oth, na.rm = TRUE) / sum(Oth_Count, na.rm = TRUE),
weight_avg_hisp = sum(val_hisp, na.rm = TRUE) / sum(Hisp_Count, na.rm = TRUE)) #Note: NaN where counts are zero
weight_avg_2021 <- countinc_2021 %>%
mutate(val_white = ifelse(White_Med_Inc == "-", NA, as.numeric(White_Med_Inc) * as.numeric(White_Count)),
val_black = ifelse(Black_Med_Inc == "-", NA, as.numeric(Black_Med_Inc) * as.numeric(Black_Count)),
val_asian = ifelse(Asian_Med_Inc == "-", NA, as.numeric(Asian_Med_Inc) * as.numeric(Asian_Count)),
val_haw = ifelse(Haw_Med_Inc == "-", NA, as.numeric(Haw_Med_Inc) * as.numeric(Haw_Count)),
val_ind = ifelse(ind_Med_Inc == "-", NA, as.numeric(ind_Med_Inc) * as.numeric(Ind_Count)),
val_mix = ifelse(mix_Med_Inc == "-", NA, as.numeric(mix_Med_Inc) * as.numeric(Mix_Count)),
val_oth = ifelse(oth_Med_Inc == "-", NA, as.numeric(oth_Med_Inc) * as.numeric(Oth_Count)),
val_hisp = ifelse(hisp_Med_Inc == "-", NA, as.numeric(hisp_Med_Inc) * as.numeric(Hisp_Count))) %>%
group_by(Subbasin) %>%
summarize(weight_avg_white = sum(val_white, na.rm = TRUE) / sum(White_Count, na.rm = TRUE),
weight_avg_black = sum(val_black, na.rm = TRUE) / sum(Black_Count, na.rm = TRUE),
weight_avg_asian = sum(val_asian, na.rm = TRUE) / sum(Asian_Count, na.rm = TRUE),
weight_avg_haw = sum(val_haw, na.rm = TRUE) / sum(Haw_Count, na.rm = TRUE),
weight_avg_ind = sum(val_ind, na.rm = TRUE) / sum(Ind_Count, na.rm = TRUE),
weight_avg_mix = sum(val_mix, na.rm = TRUE) / sum(Mix_Count, na.rm = TRUE),
weight_avg_oth = sum(val_oth, na.rm = TRUE) / sum(Oth_Count, na.rm = TRUE),
weight_avg_hisp = sum(val_hisp, na.rm = TRUE) / sum(Hisp_Count, na.rm = TRUE)) #Note: NaN where counts are zero
weight_avg_wao_2010 <- countinc_2010 %>%
mutate(val_white = ifelse(White_Med_Inc == "-", NA, as.numeric(White_Med_Inc) * as.numeric(White_Count)),
val_black = ifelse(Black_Med_Inc == "-", NA, as.numeric(Black_Med_Inc) * as.numeric(Black_Count)),
val_asian = ifelse(Asian_Med_Inc == "-", NA, as.numeric(Asian_Med_Inc) * as.numeric(Asian_Count)),
val_haw = ifelse(Haw_Med_Inc == "-", NA, as.numeric(Haw_Med_Inc) * as.numeric(Haw_Count)),
val_ind = ifelse(ind_Med_Inc == "-", NA, as.numeric(ind_Med_Inc) * as.numeric(Ind_Count)),
val_mix = ifelse(mix_Med_Inc == "-", NA, as.numeric(mix_Med_Inc) * as.numeric(Mix_Count)),
val_oth = ifelse(oth_Med_Inc == "-", NA, as.numeric(oth_Med_Inc) * as.numeric(Oth_Count)),
val_hisp = ifelse(hisp_Med_Inc == "-", NA, as.numeric(hisp_Med_Inc) * as.numeric(Hisp_Count))) %>%
group_by(Subbasin) %>%
summarize(weight_avg_white_asian = sum(val_white, val_asian, na.rm = TRUE) / sum(White_Count, Asian_Count, na.rm = TRUE),
weight_avg_other = sum(val_black,
val_haw,
val_ind,
val_mix,
val_oth,
val_hisp, na.rm = TRUE) / sum(Black_Count,
Haw_Count,
Ind_Count,
Mix_Count,
Oth_Count,
Hisp_Count, na.rm = TRUE)) #Note: NaN where counts are zero
weight_avg_wao_2011 <- countinc_2011 %>%
mutate(val_white = ifelse(White_Med_Inc == "-", NA, as.numeric(White_Med_Inc) * as.numeric(White_Count)),
val_black = ifelse(Black_Med_Inc == "-", NA, as.numeric(Black_Med_Inc) * as.numeric(Black_Count)),
val_asian = ifelse(Asian_Med_Inc == "-", NA, as.numeric(Asian_Med_Inc) * as.numeric(Asian_Count)),
val_haw = ifelse(Haw_Med_Inc == "-", NA, as.numeric(Haw_Med_Inc) * as.numeric(Haw_Count)),
val_ind = ifelse(ind_Med_Inc == "-", NA, as.numeric(ind_Med_Inc) * as.numeric(Ind_Count)),
val_mix = ifelse(mix_Med_Inc == "-", NA, as.numeric(mix_Med_Inc) * as.numeric(Mix_Count)),
val_oth = ifelse(oth_Med_Inc == "-", NA, as.numeric(oth_Med_Inc) * as.numeric(Oth_Count)),
val_hisp = ifelse(hisp_Med_Inc == "-", NA, as.numeric(hisp_Med_Inc) * as.numeric(Hisp_Count))) %>%
group_by(Subbasin) %>%
summarize(weight_avg_white_asian = sum(val_white, val_asian, na.rm = TRUE) / sum(White_Count, Asian_Count, na.rm = TRUE),
weight_avg_other = sum(val_black,
val_haw,
val_ind,
val_mix,
val_oth,
val_hisp, na.rm = TRUE) / sum(Black_Count,
Haw_Count,
Ind_Count,
Mix_Count,
Oth_Count,
Hisp_Count, na.rm = TRUE)) #Note: NaN where counts are zero
weight_avg_wao_2012 <- countinc_2012 %>%
mutate(val_white = ifelse(White_Med_Inc == "-", NA, as.numeric(White_Med_Inc) * as.numeric(White_Count)),
val_black = ifelse(Black_Med_Inc == "-", NA, as.numeric(Black_Med_Inc) * as.numeric(Black_Count)),
val_asian = ifelse(Asian_Med_Inc == "-", NA, as.numeric(Asian_Med_Inc) * as.numeric(Asian_Count)),
val_haw = ifelse(Haw_Med_Inc == "-", NA, as.numeric(Haw_Med_Inc) * as.numeric(Haw_Count)),
val_ind = ifelse(ind_Med_Inc == "-", NA, as.numeric(ind_Med_Inc) * as.numeric(Ind_Count)),
val_mix = ifelse(mix_Med_Inc == "-", NA, as.numeric(mix_Med_Inc) * as.numeric(Mix_Count)),
val_oth = ifelse(oth_Med_Inc == "-", NA, as.numeric(oth_Med_Inc) * as.numeric(Oth_Count)),
val_hisp = ifelse(hisp_Med_Inc == "-", NA, as.numeric(hisp_Med_Inc) * as.numeric(Hisp_Count))) %>%
group_by(Subbasin) %>%
summarize(weight_avg_white_asian = sum(val_white, val_asian, na.rm = TRUE) / sum(White_Count, Asian_Count, na.rm = TRUE),
weight_avg_other = sum(val_black,
val_haw,
val_ind,
val_mix,
val_oth,
val_hisp, na.rm = TRUE) / sum(Black_Count,
Haw_Count,
Ind_Count,
Mix_Count,
Oth_Count,
Hisp_Count, na.rm = TRUE)) #Note: NaN where counts are zero
weight_avg_wao_2013 <- countinc_2013 %>%
mutate(val_white = ifelse(White_Med_Inc == "-", NA, as.numeric(White_Med_Inc) * as.numeric(White_Count)),
val_black = ifelse(Black_Med_Inc == "-", NA, as.numeric(Black_Med_Inc) * as.numeric(Black_Count)),
val_asian = ifelse(Asian_Med_Inc == "-", NA, as.numeric(Asian_Med_Inc) * as.numeric(Asian_Count)),
val_haw = ifelse(Haw_Med_Inc == "-", NA, as.numeric(Haw_Med_Inc) * as.numeric(Haw_Count)),
val_ind = ifelse(ind_Med_Inc == "-", NA, as.numeric(ind_Med_Inc) * as.numeric(Ind_Count)),
val_mix = ifelse(mix_Med_Inc == "-", NA, as.numeric(mix_Med_Inc) * as.numeric(Mix_Count)),
val_oth = ifelse(oth_Med_Inc == "-", NA, as.numeric(oth_Med_Inc) * as.numeric(Oth_Count)),
val_hisp = ifelse(hisp_Med_Inc == "-", NA, as.numeric(hisp_Med_Inc) * as.numeric(Hisp_Count))) %>%
group_by(Subbasin) %>%
summarize(weight_avg_white_asian = sum(val_white, val_asian, na.rm = TRUE) / sum(White_Count, Asian_Count, na.rm = TRUE),
weight_avg_other = sum(val_black,
val_haw,
val_ind,
val_mix,
val_oth,
val_hisp, na.rm = TRUE) / sum(Black_Count,
Haw_Count,
Ind_Count,
Mix_Count,
Oth_Count,
Hisp_Count, na.rm = TRUE)) #Note: NaN where counts are zero
weight_avg_wao_2014 <- countinc_2014 %>%
mutate(val_white = ifelse(White_Med_Inc == "-", NA, as.numeric(White_Med_Inc) * as.numeric(White_Count)),
val_black = ifelse(Black_Med_Inc == "-", NA, as.numeric(Black_Med_Inc) * as.numeric(Black_Count)),
val_asian = ifelse(Asian_Med_Inc == "-", NA, as.numeric(Asian_Med_Inc) * as.numeric(Asian_Count)),
val_haw = ifelse(Haw_Med_Inc == "-", NA, as.numeric(Haw_Med_Inc) * as.numeric(Haw_Count)),
val_ind = ifelse(ind_Med_Inc == "-", NA, as.numeric(ind_Med_Inc) * as.numeric(Ind_Count)),
val_mix = ifelse(mix_Med_Inc == "-", NA, as.numeric(mix_Med_Inc) * as.numeric(Mix_Count)),
val_oth = ifelse(oth_Med_Inc == "-", NA, as.numeric(oth_Med_Inc) * as.numeric(Oth_Count)),
val_hisp = ifelse(hisp_Med_Inc == "-", NA, as.numeric(hisp_Med_Inc) * as.numeric(Hisp_Count))) %>%
group_by(Subbasin) %>%
summarize(weight_avg_white_asian = sum(val_white, val_asian, na.rm = TRUE) / sum(White_Count, Asian_Count, na.rm = TRUE),
weight_avg_other = sum(val_black,
val_haw,
val_ind,
val_mix,
val_oth,
val_hisp, na.rm = TRUE) / sum(Black_Count,
Haw_Count,
Ind_Count,
Mix_Count,
Oth_Count,
Hisp_Count, na.rm = TRUE)) #Note: NaN where counts are zero
weight_avg_wao_2015 <- countinc_2015 %>%
mutate(val_white = ifelse(White_Med_Inc == "-", NA, as.numeric(White_Med_Inc) * as.numeric(White_Count)),
val_black = ifelse(Black_Med_Inc == "-", NA, as.numeric(Black_Med_Inc) * as.numeric(Black_Count)),
val_asian = ifelse(Asian_Med_Inc == "-", NA, as.numeric(Asian_Med_Inc) * as.numeric(Asian_Count)),
val_haw = ifelse(Haw_Med_Inc == "-", NA, as.numeric(Haw_Med_Inc) * as.numeric(Haw_Count)),
val_ind = ifelse(ind_Med_Inc == "-", NA, as.numeric(ind_Med_Inc) * as.numeric(Ind_Count)),
val_mix = ifelse(mix_Med_Inc == "-", NA, as.numeric(mix_Med_Inc) * as.numeric(Mix_Count)),
val_oth = ifelse(oth_Med_Inc == "-", NA, as.numeric(oth_Med_Inc) * as.numeric(Oth_Count)),
val_hisp = ifelse(hisp_Med_Inc == "-", NA, as.numeric(hisp_Med_Inc) * as.numeric(Hisp_Count))) %>%
group_by(Subbasin) %>%
summarize(weight_avg_white_asian = sum(val_white, val_asian, na.rm = TRUE) / sum(White_Count, Asian_Count, na.rm = TRUE),
weight_avg_other = sum(val_black,
val_haw,
val_ind,
val_mix,
val_oth,
val_hisp, na.rm = TRUE) / sum(Black_Count,
Haw_Count,
Ind_Count,
Mix_Count,
Oth_Count,
Hisp_Count, na.rm = TRUE)) #Note: NaN where counts are zero
weight_avg_wao_2016 <- countinc_2016 %>%
mutate(val_white = ifelse(White_Med_Inc == "-", NA, as.numeric(White_Med_Inc) * as.numeric(White_Count)),
val_black = ifelse(Black_Med_Inc == "-", NA, as.numeric(Black_Med_Inc) * as.numeric(Black_Count)),
val_asian = ifelse(Asian_Med_Inc == "-", NA, as.numeric(Asian_Med_Inc) * as.numeric(Asian_Count)),
val_haw = ifelse(Haw_Med_Inc == "-", NA, as.numeric(Haw_Med_Inc) * as.numeric(Haw_Count)),
val_ind = ifelse(ind_Med_Inc == "-", NA, as.numeric(ind_Med_Inc) * as.numeric(Ind_Count)),
val_mix = ifelse(mix_Med_Inc == "-", NA, as.numeric(mix_Med_Inc) * as.numeric(Mix_Count)),
val_oth = ifelse(oth_Med_Inc == "-", NA, as.numeric(oth_Med_Inc) * as.numeric(Oth_Count)),
val_hisp = ifelse(hisp_Med_Inc == "-", NA, as.numeric(hisp_Med_Inc) * as.numeric(Hisp_Count))) %>%
group_by(Subbasin) %>%
summarize(weight_avg_white_asian = sum(val_white, val_asian, na.rm = TRUE) / sum(White_Count, Asian_Count, na.rm = TRUE),
weight_avg_other = sum(val_black,
val_haw,
val_ind,
val_mix,
val_oth,
val_hisp, na.rm = TRUE) / sum(Black_Count,
Haw_Count,
Ind_Count,
Mix_Count,
Oth_Count,
Hisp_Count, na.rm = TRUE)) #Note: NaN where counts are zero
weight_avg_wao_2017 <- countinc_2017 %>%
mutate(val_white = ifelse(White_Med_Inc == "-", NA, as.numeric(White_Med_Inc) * as.numeric(White_Count)),
val_black = ifelse(Black_Med_Inc == "-", NA, as.numeric(Black_Med_Inc) * as.numeric(Black_Count)),
val_asian = ifelse(Asian_Med_Inc == "-", NA, as.numeric(Asian_Med_Inc) * as.numeric(Asian_Count)),
val_haw = ifelse(Haw_Med_Inc == "-", NA, as.numeric(Haw_Med_Inc) * as.numeric(Haw_Count)),
val_ind = ifelse(ind_Med_Inc == "-", NA, as.numeric(ind_Med_Inc) * as.numeric(Ind_Count)),
val_mix = ifelse(mix_Med_Inc == "-", NA, as.numeric(mix_Med_Inc) * as.numeric(Mix_Count)),
val_oth = ifelse(oth_Med_Inc == "-", NA, as.numeric(oth_Med_Inc) * as.numeric(Oth_Count)),
val_hisp = ifelse(hisp_Med_Inc == "-", NA, as.numeric(hisp_Med_Inc) * as.numeric(Hisp_Count))) %>%
group_by(Subbasin) %>%
summarize(weight_avg_white_asian = sum(val_white, val_asian, na.rm = TRUE) / sum(White_Count, Asian_Count, na.rm = TRUE),
weight_avg_other = sum(val_black,
val_haw,
val_ind,
val_mix,
val_oth,
val_hisp, na.rm = TRUE) / sum(Black_Count,
Haw_Count,
Ind_Count,
Mix_Count,
Oth_Count,
Hisp_Count, na.rm = TRUE)) #Note: NaN where counts are zero
weight_avg_wao_2018 <- countinc_2018 %>%
mutate(val_white = ifelse(White_Med_Inc == "-", NA, as.numeric(White_Med_Inc) * as.numeric(White_Count)),
val_black = ifelse(Black_Med_Inc == "-", NA, as.numeric(Black_Med_Inc) * as.numeric(Black_Count)),
val_asian = ifelse(Asian_Med_Inc == "-", NA, as.numeric(Asian_Med_Inc) * as.numeric(Asian_Count)),
val_haw = ifelse(Haw_Med_Inc == "-", NA, as.numeric(Haw_Med_Inc) * as.numeric(Haw_Count)),
val_ind = ifelse(ind_Med_Inc == "-", NA, as.numeric(ind_Med_Inc) * as.numeric(Ind_Count)),
val_mix = ifelse(mix_Med_Inc == "-", NA, as.numeric(mix_Med_Inc) * as.numeric(Mix_Count)),
val_oth = ifelse(oth_Med_Inc == "-", NA, as.numeric(oth_Med_Inc) * as.numeric(Oth_Count)),
val_hisp = ifelse(hisp_Med_Inc == "-", NA, as.numeric(hisp_Med_Inc) * as.numeric(Hisp_Count))) %>%
group_by(Subbasin) %>%
summarize(weight_avg_white_asian = sum(val_white, val_asian, na.rm = TRUE) / sum(White_Count, Asian_Count, na.rm = TRUE),
weight_avg_other = sum(val_black,
val_haw,
val_ind,
val_mix,
val_oth,
val_hisp, na.rm = TRUE) / sum(Black_Count,
Haw_Count,
Ind_Count,
Mix_Count,
Oth_Count,
Hisp_Count, na.rm = TRUE)) #Note: NaN where counts are zero
weight_avg_wao_2019 <- countinc_2019                                                                                                                                              %>%
mutate(val_white = ifelse(White_Med_Inc == "-", NA, as.numeric(White_Med_Inc) * as.numeric(White_Count)),
val_black = ifelse(Black_Med_Inc == "-", NA, as.numeric(Black_Med_Inc) * as.numeric(Black_Count)),
val_asian = ifelse(Asian_Med_Inc == "-", NA, as.numeric(Asian_Med_Inc) * as.numeric(Asian_Count)),
val_haw = ifelse(Haw_Med_Inc == "-", NA, as.numeric(Haw_Med_Inc) * as.numeric(Haw_Count)),
val_ind = ifelse(ind_Med_Inc == "-", NA, as.numeric(ind_Med_Inc) * as.numeric(Ind_Count)),
val_mix = ifelse(mix_Med_Inc == "-", NA, as.numeric(mix_Med_Inc) * as.numeric(Mix_Count)),
val_oth = ifelse(oth_Med_Inc == "-", NA, as.numeric(oth_Med_Inc) * as.numeric(Oth_Count)),
val_hisp = ifelse(hisp_Med_Inc == "-", NA, as.numeric(hisp_Med_Inc) * as.numeric(Hisp_Count))) %>%
group_by(Subbasin) %>%
summarize(weight_avg_white_asian = sum(val_white, val_asian, na.rm = TRUE) / sum(White_Count, Asian_Count, na.rm = TRUE),
weight_avg_other = sum(val_black,
val_haw,
val_ind,
val_mix,
val_oth,
val_hisp, na.rm = TRUE) / sum(Black_Count,
Haw_Count,
Ind_Count,
Mix_Count,
Oth_Count,
Hisp_Count, na.rm = TRUE)) #Note: NaN where counts are zero
weight_avg_wao_2020 <- countinc_2020 %>%
mutate(val_white = ifelse(White_Med_Inc == "-", NA, as.numeric(White_Med_Inc) * as.numeric(White_Count)),
val_black = ifelse(Black_Med_Inc == "-", NA, as.numeric(Black_Med_Inc) * as.numeric(Black_Count)),
val_asian = ifelse(Asian_Med_Inc == "-", NA, as.numeric(Asian_Med_Inc) * as.numeric(Asian_Count)),
val_haw = ifelse(Haw_Med_Inc == "-", NA, as.numeric(Haw_Med_Inc) * as.numeric(Haw_Count)),
val_ind = ifelse(ind_Med_Inc == "-", NA, as.numeric(ind_Med_Inc) * as.numeric(Ind_Count)),
val_mix = ifelse(mix_Med_Inc == "-", NA, as.numeric(mix_Med_Inc) * as.numeric(Mix_Count)),
val_oth = ifelse(oth_Med_Inc == "-", NA, as.numeric(oth_Med_Inc) * as.numeric(Oth_Count)),
val_hisp = ifelse(hisp_Med_Inc == "-", NA, as.numeric(hisp_Med_Inc) * as.numeric(Hisp_Count))) %>%
group_by(Subbasin) %>%
summarize(weight_avg_white_asian = sum(val_white, val_asian, na.rm = TRUE) / sum(White_Count, Asian_Count, na.rm = TRUE),
weight_avg_other = sum(val_black,
val_haw,
val_ind,
val_mix,
val_oth,
val_hisp, na.rm = TRUE) / sum(Black_Count,
Haw_Count,
Ind_Count,
Mix_Count,
Oth_Count,
Hisp_Count, na.rm = TRUE)) #Note: NaN where counts are zero
weight_avg_wao_2021 <- countinc_2021 %>%
mutate(val_white = ifelse(White_Med_Inc == "-", NA, as.numeric(White_Med_Inc) * as.numeric(White_Count)),
val_black = ifelse(Black_Med_Inc == "-", NA, as.numeric(Black_Med_Inc) * as.numeric(Black_Count)),
val_asian = ifelse(Asian_Med_Inc == "-", NA, as.numeric(Asian_Med_Inc) * as.numeric(Asian_Count)),
val_haw = ifelse(Haw_Med_Inc == "-", NA, as.numeric(Haw_Med_Inc) * as.numeric(Haw_Count)),
val_ind = ifelse(ind_Med_Inc == "-", NA, as.numeric(ind_Med_Inc) * as.numeric(Ind_Count)),
val_mix = ifelse(mix_Med_Inc == "-", NA, as.numeric(mix_Med_Inc) * as.numeric(Mix_Count)),
val_oth = ifelse(oth_Med_Inc == "-", NA, as.numeric(oth_Med_Inc) * as.numeric(Oth_Count)),
val_hisp = ifelse(hisp_Med_Inc == "-", NA, as.numeric(hisp_Med_Inc) * as.numeric(Hisp_Count))) %>%
group_by(Subbasin) %>%
summarize(weight_avg_white_asian = sum(val_white, val_asian, na.rm = TRUE) / sum(White_Count, Asian_Count, na.rm = TRUE),
weight_avg_other = sum(val_black,
val_haw,
val_ind,
val_mix,
val_oth,
val_hisp, na.rm = TRUE) / sum(Black_Count,
Haw_Count,
Ind_Count,
Mix_Count,
Oth_Count,
Hisp_Count, na.rm = TRUE)) #Note: NaN where counts are zero
View(weight_avg_wao_2010)
View(weight_avg_wao_2010)
View(weight_avg_wao_2010)
# ---- Chai Squared test to see statistical difference in means ----
#for white+asian vs all other races
#first adding year variable to each
weight_avg_wao_2010 <- weight_avg_wao_2010 %>% mutate(Year = 2010)
View(weight_avg_wao_2010)
# ---- Chai Squared test to see statistical difference in means ----
#for white+asian vs all other races
#first adding year variable to each
weight_avg_wao_2010 <- weight_avg_wao_2010 %>% mutate(Year = 2010) %>%
select(Subbasin,Year,everything())
View(weight_avg_wao_2010)
weight_avg_wao_2011 <- weight_avg_wao_2011 %>% mutate(Year = 2011) %>%
select(Subbasin,Year,everything())
weight_avg_wao_2012 <- weight_avg_wao_2012 %>% mutate(Year = 2012) %>%
select(Subbasin,Year,everything())
weight_avg_wao_2013 <- weight_avg_wao_2013 %>% mutate(Year = 2013) %>%
select(Subbasin,Year,everything())
weight_avg_wao_2014 <- weight_avg_wao_2014 %>% mutate(Year = 2014) %>%
select(Subbasin,Year,everything())
weight_avg_wao_2015 <- weight_avg_wao_2015 %>% mutate(Year = 2015) %>%
select(Subbasin,Year,everything())
weight_avg_wao_2016 <- weight_avg_wao_2016 %>% mutate(Year = 2016) %>%
select(Subbasin,Year,everything())
weight_avg_wao_2017 <- weight_avg_wao_2017 %>% mutate(Year = 2017) %>%
select(Subbasin,Year,everything())
weight_avg_wao_2018 <- weight_avg_wao_2018 %>% mutate(Year = 2018) %>%
select(Subbasin,Year,everything())
weight_avg_wao_2019 <- weight_avg_wao_2019 %>% mutate(Year = 2019) %>%
select(Subbasin,Year,everything())
weight_avg_wao_2020 <- weight_avg_wao_2020 %>% mutate(Year = 2020) %>%
select(Subbasin,Year,everything())
weight_avg_wao_2021 <- weight_avg_wao_2021 %>% mutate(Year = 2021) %>%
select(Subbasin,Year,everything())
wa_income <- rbind(weight_avg_wao_2010,weight_avg_wao_2011)
View(wa_income)
wa_income <- rbind(wa_income,weight_avg_wao_2011)
wa_income <- rbind(wa_income,weight_avg_wao_2012)
wa_income <- rbind(wa_income,weight_avg_wao_2013)
wa_income <- rbind(wa_income,weight_avg_wao_2014)
wa_income <- rbind(wa_income,weight_avg_wao_2015)
wa_income <- rbind(wa_income,weight_avg_wao_2016)
wa_income <- rbind(wa_income,weight_avg_wao_2017)
wa_income <- rbind(wa_income,weight_avg_wao_2018)
wa_income <- rbind(wa_income,weight_avg_wao_2019)
wa_income <- rbind(wa_income,weight_avg_wao_2020)
wa_income <- rbind(wa_income,weight_avg_wao_2021)
View(wa_income)
wa_income <- rbind(weight_avg_wao_2010,weight_avg_wao_2011)
wa_income <- rbind(wa_income,weight_avg_wao_2012)
wa_income <- rbind(wa_income,weight_avg_wao_2013)
wa_income <- rbind(wa_income,weight_avg_wao_2014)
wa_income <- rbind(wa_income,weight_avg_wao_2015)
wa_income <- rbind(wa_income,weight_avg_wao_2016)
wa_income <- rbind(wa_income,weight_avg_wao_2017)
wa_income <- rbind(wa_income,weight_avg_wao_2018)
wa_income <- rbind(wa_income,weight_avg_wao_2019)
wa_income <- rbind(wa_income,weight_avg_wao_2020)
wa_income <- rbind(wa_income,weight_avg_wao_2021)
View(wa_income)
str(wa_income)
#running ttest to see differences
t_test_results <- benson_data %>%
group_by(Subbasin,Year) %>%
summarize(p_value = t.test(weight_avg_white_asian, weight_avg_other,
paired = TRUE)$p.value)
#running ttest to see differences
t_test_results <- wa_income %>%
group_by(Subbasin,Year) %>%
summarize(p_value = t.test(weight_avg_white_asian, weight_avg_other,
paired = TRUE)$p.value)
#running ttest to see differences
t_test_results <- wa_income %>%
group_by(Subbasin) %>%
summarize(p_value = t.test(weight_avg_white_asian, weight_avg_other,
paired = TRUE)$p.value)
View(t_test_results)
t_statistic <- t_test_result$statistic$statistic
t_statistic <- t_test_results$statistic$statistic
p_value <- t_test_results$p.value
ttest_ethnicity_inc <- write.xlsx(t_test_results,file = "ttest_ethnicity_inc.xlsx")
